[
    {
        "content": "<p>Define a list of directories to search for boost, Consort will automatically\n add these directories to locations to search for Boost. You can modify this\n list before calling <a href=\"#/co_enable_boost\">co_enable_boost</a> to adjust the\n locations Consort will search.</p>\n<p>By default, <a href=\"#/co_enable_boost\">co_enable_boost</a> searches the following locations:</p>\n<h2>Windows</h2>\n<ul>\n<li>c:/opt/boost/cxx${CMAKE_CXX_STANDARD}/${CONSORT_PLATFORM_NAME}/${CONSORT_COMPILER_NAME}</li>\n<li>c:/boost/cxx${CMAKE_CXX_STANDARD}/${CONSORT_PLATFORM_NAME}/${CONSORT_COMPILER_NAME}</li>\n<li>c:/opt/boost/cxx${CMAKE_CXX_STANDARD}/${CONSORT_PLATFORM_NAME}</li>\n<li>c:/boost/cxx${CMAKE_CXX_STANDARD}/${CONSORT_PLATFORM_NAME}</li>\n<li>c:/opt/boost/cxx${CMAKE_CXX_STANDARD}/${CONSORT_COMPILER_NAME}</li>\n<li>c:/boost/cxx${CMAKE_CXX_STANDARD}/${CONSORT_COMPILER_NAME}</li>\n<li>c:/opt/boost/cxx${CMAKE_CXX_STANDARD}</li>\n<li>c:/boost/cxx${CMAKE_CXX_STANDARD}</li>\n<li>c:/opt/boost/${CONSORT_PLATFORM_NAME}/${CONSORT_COMPILER_NAME}</li>\n<li>c:/boost/${CONSORT_PLATFORM_NAME}/${CONSORT_COMPILER_NAME}</li>\n<li>c:/opt/boost/${CONSORT_PLATFORM_NAME}</li>\n<li>c:/boost/${CONSORT_PLATFORM_NAME}</li>\n<li>c:/opt/boost/${CONSORT_COMPILER_NAME}</li>\n<li>c:/boost/${CONSORT_COMPILER_NAME}</li>\n<li>c:/opt/boost</li>\n<li>c:/boost</li>\n</ul>\n<h2>Linux and OS X</h2>\n<ul>\n<li>/opt/boost/${CONSORT_PLATFORM_NAME}/${CONSORT_COMPILER_NAME}/cxx${CMAKE_CXX_STANDARD}</li>\n<li>/opt/boost/${CONSORT_PLATFORM_NAME}/cxx${CMAKE_CXX_STANDARD}</li>\n<li>/opt/boost/${CONSORT_COMPILER_NAME}/cxx${CMAKE_CXX_STANDARD}</li>\n<li>/opt/boost/cxx${CMAKE_CXX_STANDARD}</li>\n<li>/opt/boost/${CONSORT_PLATFORM_NAME}/${CONSORT_COMPILER_NAME}</li>\n<li>/opt/boost/${CONSORT_PLATFORM_NAME}</li>\n<li>/opt/boost/${CONSORT_COMPILER_NAME}</li>\n<li>/opt/boost</li>\n</ul>",
        "path": [
            "Externals",
            "CONSORT_BOOST_LOCATIONS"
        ],
        "title": "CONSORT_BOOST_LOCATIONS"
    },
    {
        "content": "<p><code>co_enable_boost(version component component...)</code></p>\n<p>Enable support for Boost, you should specify the version of boost you are\n developing against and a list of boost libraries to find.</p>\n<p>Consort searches the paths in <a href=\"#/CONSORT_BOOST_LOCATIONS\">CONSORT_BOOST_LOCATIONS</a>\n for the specified boost version and libraries. Consort will not search system\n paths and will look for static libraries. Consort:</p>\n<ul>\n<li>Adds the boost include directory to the list of global include directories.</li>\n<li>Enables boost filesystem V3 (<code>-DBOOST_FILESYSTEM_VERSION=3</code>).</li>\n<li>Disables autolinking on windows (<code>-DBOOST_ALL_NO_LIB</code>).</li>\n</ul>\n<p>Where necessary Consort will sanitise boost library names to make linking to\n boost as painless as possible.</p>",
        "path": [
            "Externals",
            "co_enable_boost"
        ],
        "title": "co_enable_boost"
    },
    {
        "content": "<p><code>co_enable_default_boost(component component...)</code></p>\n<p>Enable the boost version and libraries that Consort uses by default.\n By default Consort requests boost 1.58 (the most recent at time of writing)\n and the most frequently used libraries.</p>\n<p>You may specify additional components to load as arguments to this function.</p>\n<p>By default Consort finds the following boost libraries:</p>\n<ul>\n<li>date_time</li>\n<li>chrono</li>\n<li>context</li>\n<li>coroutine</li>\n<li>filesystem</li>\n<li>system</li>\n<li>thread</li>\n<li>random</li>\n<li>regex</li>\n<li>atomic</li>\n<li>graph</li>\n</ul>\n<p>It is not necessary to specify header only libraries in the component list.</p>",
        "path": [
            "Externals",
            "co_enable_default_boost"
        ],
        "title": "co_enable_default_boost"
    },
    {
        "content": "<p>Groups common to all target types (<a href=\"#/co_exe\">co_exe</a>, <a href=\"#/co_lib\">co_lib</a> and\n <a href=\"#/co_dll\">co_dll</a>).</p>\n<p>Groups define a set of information related to a target, groups are found in\n the list of arguments to a target by looking for the group name followed by a\n colon. For example:</p>\n<pre><code> co_exe(hello sources: *.cpp)\n</code></pre>\n<p>the target above uses the \"sources:\" group to define the source files for the\n target. Every argument that is not a <a href=\"CONSORT_COMMON_FLAGS\">flag</a> until the\n next group name is considered part of the group.</p>\n<dl>\n<dt>sources</dt>\n<dd>Source files for the target. May include globbing expressions. Every source\n   file or glob must match at least one file that already exists, otherwise\n   Consort will generate an error. The CMake documentation recommends against\n   using globbing expressions, however, Consort believes that its easier to\n   use a globbing expression and re-run cmake as necessary, rather than having\n   to edit the build configuration every time you add a source file.</dd>\n<dt>generated-sources</dt>\n<dd>Source files that are conditional or generated in some way by the build\n   system or other targets. May include generator expressions but not globbing\n   expressions.</dd>\n<dt>asm-sources</dt>\n<dd>Assembler sources for use with yasm. These files will not be built if ASM\n   support is disabled or yasm was not found on the build system. May include\n   globbing expressions. Every source file or glob must match at least one file\n   that already exists, otherwise Consort will generate an error.</dd>\n<dt>generic-sources</dt>\n<dd>Source files to use when ASM support is disabled or yasm was not found. If\n   ASM support is enabled and yasm was found these files will not be built. May\n   include globbing expressions. Every source file or glob must match at least\n   one file that already exists, otherwise Consort will generate an error.</dd>\n<dt>libraries</dt>\n<dd>Libraries to link into the target. May include the names of other targets,\n   generator expressions, or variable expansions that define the location of a\n   library (e.g. <code>${Boost_SYSTEM_LIBRARY}</code>). Results in a call to\n   <a href=\"http://www.cmake.org/cmake/help/v3.3/command/target_link_libraries.html\">target_link_libraries</a>.</dd>\n<dt>qt-modules</dt>\n<dd>Qt modules to link into the target. <a href=\"#/co_enable_qt5\">co_enable_qt5</a> should be\n   called before attempting to use Qt support. The module names should be\n   capitalised and omit the Qt prefix. For example, use <code>qt-modules: Core Gui</code>\n   to link to QtCore and QtGui. Results in a call to\n   <a href=\"http://www.cmake.org/cmake/help/v3.3/command/target_link_libraries.html\">target_link_libraries</a>.</dd>\n<dt>compile-flags</dt>\n<dd>Add compile flags for the target. May include generator expressions. Note:\n   the compile flags will apply to all source files (except asm-sources) for\n   the target, so take care to specify options that your compiler will accept\n   for all types of source file the target uses. Results in a call to\n   <a href=\"http://www.cmake.org/cmake/help/v3.3/command/target_compile_options.html\">target_compile_options</a></dd>\n<dt>link-flags</dt>\n<dd>Add link flags for the target. May include generator expressions. Sets the\n   <a href=\"http://www.cmake.org/cmake/help/v3.3/prop_tgt/LINK_FLAGS.html\">LINK_FLAGS</a>\n   property on the target.</dd>\n<dt>depends</dt>\n<dd>Explicitly declare that the target depends on other CMake targets. Results\n   in a call to <a href=\"http://www.cmake.org/cmake/help/v3.3/command/add_dependencies.html\">add_dependencies</a>.</dd>\n<dt>output-name</dt>\n<dd>By default, CMake will use the target name as the name of the output file,\n   <code>output-name</code> can be used to change the output file name. Sets the\n   <a href=\"http://www.cmake.org/cmake/help/v3.3/prop_tgt/OUTPUT_NAME.html\">OUTPUT_NAME</a>\n   property on the target.</dd>\n<dt>resources</dt>\n<dd>Explicitly list Qt resource files that should be compiled into the target.\n   It is also acceptable to include Qt resource files in the sources: group, as\n   Consort enables the <a href=\"http://www.cmake.org/cmake/help/v3.3/variable/CMAKE_AUTORCC.html\">AUTORCC</a>\n   functionality of cmake.</dd>\n<dt>ui-sources</dt>\n<dd>List Qt UI files that could be compiled into the target. The files will be\n   generated in the current build directory, and can be included with\n   <code>#include \"ui_{filename}.h\"</code>.</dd>\n<dt>moc-sources</dt>\n<dd>List source files that should be run through Qt's MOC. The generated files\n   will automatically be compiled into the target. Note, that the preferred\n   method for triggering MOC runs is to set the <a href=\"#/CONSORT_COMMON_FLAGS\">automoc</a>\n   flag on the target.</dd>\n<dt>translations</dt>\n<dd>List Qt ts files that should generated for the target, and compiled into it.\n   Consort will run Qt's linguist tools to generate translatable strings for\n   the target and put the results in the specified .ts files. The translated\n   strings will then be compiled into the target as resources, available under\n   the <code>:/translations</code> prefix.</dd>\n<dt>tr-sources</dt>\n<dd>List Qt ts files that should be compiled into the target. The translated\n   strings will then be compiled into the target as resources, available under\n   the <code>:/translations</code> prefix. Unlike the <code>translations</code> group, the files in\n   the <code>tr-sources</code> group are not automatically generated from the source files\n   for thr target.</dd>\n<dt>qm-sources</dt>\n<dd>List Qt qm files that should be compiled into the target. The qm files will\n   be made available as resources, available under the <code>:/translations</code> prefix.</dd>\n</dl>",
        "path": [
            "Build Targets",
            "CONSORT_COMMON_GROUPS"
        ],
        "title": "CONSORT_COMMON_GROUPS"
    },
    {
        "content": "<p>Flags common to all target types (<a href=\"#/co_exe\">co_exe</a>, <a href=\"#/co_lib\">co_lib</a> and\n <a href=\"#/co_dll\">co_dll</a>). Flags are keywords that can be added to the definition of\n a target to enable some additional functionality or properties, e.g.</p>\n<pre><code> co_exe(hello sources: *.cpp automoc)\n</code></pre>\n<p>the <code>automoc</code> keyword in the above example is a flag, and causes Consort to\n set the AUTOMOC property on the target. Flags may appear anywhere in the\n argument list.</p>\n<dl>\n<dt>automoc</dt>\n<dd>Enable automoc for the target (see the <a href=\"http://www.cmake.org/cmake/help/v3.3/prop_tgt/AUTOMOC.html\">AUTOMOC CMake documentation</a>)</dd>\n<dt>autouic</dt>\n<dd>Enable autouic for the target (see the <a href=\"http://www.cmake.org/cmake/help/v3.3/prop_tgt/AUTOUIC.html\">AUTOUIC CMake documentation</a>)</dd>\n</dl>",
        "path": [
            "Build Targets",
            "CONSORT_COMMON_FLAGS"
        ],
        "title": "CONSORT_COMMON_FLAGS"
    },
    {
        "content": "<p><code>co_process_common_args(target)</code></p>\n<p>This function is used to process groups and flags common to all target types.\n It is used internally by Consort to set the properties according to arguments\n passed to the target generation functions (<a href=\"#/co_exe\">co_exe</a>,\n <a href=\"#/co_lib\">co_lib</a> and <a href=\"#/co_dll\">co_dll</a>).</p>\n<p>If necessary, you can use it in your own custom routines to add support for\n Consort's common flags:</p>\n<pre><code> function(my_target name)\n     co_parse_args(THIS \"${CONSORT_COMMON_GROUPS}\" \"${CONSORT_COMMON_FLAGS}\" ${ARGN})\n\n     co_safe_glob(THIS_SOURCES ${THIS_SOURCES})\n     add_executable(${name} ${THIS_SOURCES} ${THIS_GENERATED_SOURCES})\n\n     co_process_common_args(${name})\n endfunction()\n</code></pre>",
        "path": [
            "Utilities",
            "co_process_common_args"
        ],
        "title": "co_process_common_args"
    },
    {
        "content": "<p><code>co_debug(variable-name variable-name ...)</code></p>\n<p>print the value of each listed variable</p>",
        "path": [
            "Utilities",
            "co_debug"
        ],
        "title": "co_debug"
    },
    {
        "content": "<p><code>co_stack_trace()</code></p>\n<p>print a stack trace</p>",
        "path": [
            "Utilities",
            "co_stack_trace"
        ],
        "title": "co_stack_trace"
    },
    {
        "content": "<p><code>co_dll(name groups... flags...)</code></p>\n<p>Declare a shared library (DLL) target. The properties of the target are\n specified in a declarative fashion as <a href=\"#/CONSORT_COMMON_GROUPS\">groups</a> and\n <a href=\"#/CONSORT_COMMON_FLAGS\">flags</a>. The most common groups you will need with\n the <code>co_dll</code> function are the <code>sources:</code> group, for specifying source files,\n and the <code>libraries:</code> group, for specifying libraries to link against.</p>\n<p><code>co_dll</code> supports all the common groups and flags, consult the documentation\n for <a href=\"#/CONSORT_COMMON_GROUPS\">CONSORT_COMMON_GROUPS</a> and\n <a href=\"#/CONSORT_COMMON_FLAGS\">CONSORT_COMMON_FLAGS</a> for more information on the\n available options.</p>\n<p>If you do not specify any source files, Consort will generate a dummy source\n file to make the target into a \"real\" target. This can be used to specify\n linker dependencies or for future proofing with header only libraries.</p>\n<p>Example:</p>\n<pre><code>co_dll( my_library sources: my_library.cpp libraries: ${Boost_DATE_TIME_LIBRARY})\n</code></pre>",
        "path": [
            "Build Targets",
            "co_dll"
        ],
        "title": "co_dll"
    },
    {
        "content": "<p><code>co_exe(name groups... flags...)</code></p>\n<p>Declare an executable (EXE) target. The properties of the target are\n specified in a declarative fashion as <a href=\"#/CONSORT_COMMON_GROUPS\">groups</a> and\n <a href=\"#/CONSORT_COMMON_FLAGS\">flags</a>. The most common groups you will need with\n the <code>co_dll</code> function are the <code>sources:</code> group, for specifying source files,\n and the <code>libraries:</code> group, for specifying libraries to link against.</p>\n<p><code>co_exe</code> supports all the common groups and flags, consult the documentation\n for <a href=\"#/CONSORT_COMMON_GROUPS\">CONSORT_COMMON_GROUPS</a> and\n <a href=\"#/CONSORT_COMMON_FLAGS\">CONSORT_COMMON_FLAGS</a> for more information on the\n available options.</p>\n<p><code>co_exe</code> also supports the following flag:</p>\n<dl>\n<dt>gui</dt>\n<dd>Declare the target to be a GUI program, on Windows this causes the\n   <a href=\"http://www.cmake.org/cmake/help/v3.3/prop_tgt/WIN32_EXECUTABLE.html\">WIN32_EXECUTABLE</a>\n   property to be set on the target and will enable auto-linking to QtMain.\n   The flag currently has no effect on Linux or OS X.</dd>\n</dl>\n<p>Example:</p>\n<pre><code>co_exe( my_program sources: my_program.cpp libraries: my_library)\n</code></pre>",
        "path": [
            "Build Targets",
            "co_exe"
        ],
        "title": "co_exe"
    },
    {
        "content": "<p><code>co_prefer_static()</code></p>\n<p>Prefer finding static libraries (.a files) to shared libraries (.so) files\n when using find_package or find_libraries. Not supported on Windows as static\n and shared libraries both use the .lib extension.</p>\n<p>Call this as needed to change the behaviour for subsequent external libraries.</p>\n<p>Example:</p>\n<pre><code> co_prefer_static()\n find_package(PNG) # find static libpng if possible (otherwise fall back to shared)\n</code></pre>",
        "path": [
            "Externals",
            "co_prefer_static"
        ],
        "title": "co_prefer_static"
    },
    {
        "content": "<p><code>co_prefer_shared()</code></p>\n<p>Prefer finding shared libraries (.so files) to static libraries (.a) files\n when using find_package or find_libraries. Not supported on Windows as static\n and shared libraries both use the .lib extension.</p>\n<p>Call this as needed to change the behaviour for subsequent external libraries.</p>\n<p>Example:</p>\n<pre><code> co_prefer_shared()\n find_package(PNG) # find shared libpng if possible (otherwise fall back to static)\n</code></pre>",
        "path": [
            "Externals",
            "co_prefer_shared"
        ],
        "title": "co_prefer_shared"
    },
    {
        "content": "<p><code>co_join(output-variable glue list-item...)</code></p>\n<p>Collapse list items into a string, joining them with the specified glue.</p>\n<p>Example:</p>\n<pre><code> set(LIST a b c)\n co_join(OUTPUT \",\" ${LIST})\n # OUTPUT = \"a,b,c\"\n</code></pre>",
        "path": [
            "Utilities",
            "co_join"
        ],
        "title": "co_join"
    },
    {
        "content": "<p><code>co_split(output-variable glue string)</code></p>\n<p>Split a strings into a list using the specified glue character</p>\n<p>Example:</p>\n<pre><code> set(STRING \"a,b,c\")\n co_split(OUTPUT \",\" \"${STRING}\")\n # OUTPUT = \"a;b;c\"\n</code></pre>",
        "path": [
            "Utilities",
            "co_split"
        ],
        "title": "co_split"
    },
    {
        "content": "<p><code>co_remove_flags(var flag...)</code></p>\n<p>Remove all matching flags from the (space separated) list of flags in \"var\".</p>\n<p>Useful for manipulating CMake variables that contain command line flags, but\n do not separate them into a standard CMake List.</p>",
        "path": [
            "Utilities",
            "co_remove_flags"
        ],
        "title": "co_remove_flags"
    },
    {
        "content": "<p><code>co_add_flags(var flag...)</code></p>\n<p>Add all matching flags to the (space separated) list of flags in \"var\".</p>\n<p>Existing duplicates will be removed.</p>\n<p>Useful for manipulating CMake variables that contain command line flags, but\n do not separate them into a standard CMake List.</p>",
        "path": [
            "Utilities",
            "co_add_flags"
        ],
        "title": "co_add_flags"
    },
    {
        "content": "<p><code>co_replace_flag(var old-flag new-flag)</code></p>\n<p>Replace old_flag with new_flag in the (space separated) list of flags. The\n position of the flag in the variable is not changed.</p>\n<p>Useful for manipulating CMake variables that contain command line flags, but\n do not separate them into a standard CMake List.</p>",
        "path": [
            "Utilities",
            "co_replace_flags"
        ],
        "title": "co_replace_flags"
    },
    {
        "content": "<p><code>co_lib(name groups... flags...)</code></p>\n<p>Declare a static library (archive) target. The properties of the target are\n specified in a declarative fashion as <a href=\"#/CONSORT_COMMON_GROUPS\">groups</a> and\n <a href=\"#/CONSORT_COMMON_FLAGS\">flags</a>. The most common groups you will need with\n the <code>co_lib</code> function are the <code>sources:</code> group, for specifying source files,\n and the <code>libraries:</code> group, for specifying libraries to link against.</p>\n<p><code>co_lib</code> supports all the common groups and flags, consult the documentation\n for <a href=\"#/CONSORT_COMMON_GROUPS\">CONSORT_COMMON_GROUPS</a> and\n <a href=\"#/CONSORT_COMMON_FLAGS\">CONSORT_COMMON_FLAGS</a> for more information on the\n available options.</p>\n<p>If you do not specify any source files, Consort will generate a dummy source\n file to make the target into a \"real\" target. This can be used to specify\n linker dependencies or for future proofing with header only libraries.</p>\n<p>Example:</p>\n<pre><code>co_lib( my_library sources: my_library.cpp libraries: ${Boost_DATE_TIME_LIBRARY})\n</code></pre>",
        "path": [
            "Build Targets",
            "co_lib"
        ],
        "title": "co_lib"
    },
    {
        "content": "<p><code>co_link(target link)</code></p>\n<p>Create a symbolic link (or junction on Windows) at \"link\" that points to\n \"target\".</p>",
        "path": [
            "Utilities",
            "co_link"
        ],
        "title": "co_link"
    },
    {
        "content": "<p><code>co_find_modules( path )</code></p>\n<p>Find consort modules located in the specified directory (relative to\n CMAKE_CURRENT_SOURCE_DIR). A consort module is a subdirectory of path that\n contains a module.cmake file. The module.cmake file will be included.</p>\n<p>To create a module, create a subdirectory of the search path (for example,\n if you call <code>co_find_modules(modules)</code> create your module in the\n <code>modules/my_module</code> directory), then create a <code>CMakeLists.txt</code> and a\n <code>module.cmake</code> file in that directory. In the <code>CMakeLists.txt</code> declare your\n targets as normal. In the <code>module.cmake</code> file call <a href=\"#/co_module\">co_module</a>\n to declare your module.</p>\n<p>You should call this after including consort.cmake and pass in directories\n you would like Consort to search for modules.</p>\n<p>Consort will automatically enable modules that are linked to by targets\n included in the build. You can explicitly request Consort include a module\n using <a href=\"#/co_require_module\">co_require_module</a>. At the end of your root\n CMakeLists.txt you should call <a href=\"#/co_include_modules\">co_include_modules</a> to\n include all activated modules.</p>\n<p>Example:</p>\n<pre><code> co_find_modules(modules)\n\n # Explicitly enable my_module\n co_require_module(my_module)\n\n co_include_modules()\n</code></pre>",
        "path": [
            "Module Functions",
            "co_find_modules"
        ],
        "title": "co_find_modules"
    },
    {
        "content": "<pre><code> co_module( name\n     [directory: (relative path to module directory)]\n     [aliases: alias alias ...]\n )\n</code></pre>\n<p>Declare a Consort module. A consort module is a directory containing a\n CMakeLists.txt and a module.cmake file. The CMakeLists.txt file defines how\n to build the module. The module.cmake file registers the module with Consort.\n Calls to the <code>co_module</code> function should be placed in the module.cmake file.\n Consort will then fulfil requests to activate the module by calling\n <a href=\"http://www.cmake.org/cmake/help/v3.3/command/add_subdirectory.html\">add_subdirectory</a>\n on the directory associated with the module. See <a href=\"#/co_find_modules\">co_find_modules</a>\n for more information.</p>\n<p>The <code>name</code> of the module is the name used to activate it, this should normally\n be the name of the library target the module exports, as this will allow\n Consort to automatically activate the module when a target links to it.</p>\n<p>The <code>directory:</code> is the directory to pass to <code>add_subdirectory</code>. By default\n this will be the location of the module.cmake file. Otherwise, it is specified\n relative to the path to the module.cmake file.</p>\n<p>The <code>aliases:</code> group allows additional names to be associated with the module,\n if, for example, the module contains multiple library targets.</p>",
        "path": [
            "Module Functions",
            "co_module"
        ],
        "title": "co_module"
    },
    {
        "content": "<p><code>co_require_module( name )</code></p>\n<p>Add the specified module to the list of modules Consort will enable.</p>\n<p>See <a href=\"#/co_find_modules\">co_find_modules</a> and <a href=\"#/co_module\">co_module</a>.</p>",
        "path": [
            "Module Functions",
            "co_require_module"
        ],
        "title": "co_require_module"
    },
    {
        "content": "<p><code>co_include_modules()</code></p>\n<p>Call <a href=\"http://www.cmake.org/cmake/help/v3.3/command/add_subdirectory.html\">add_subdirectory</a>\n for every active module that has not already been\n included, if any modules are added to the active list,\n <a href=\"http://www.cmake.org/cmake/help/v3.3/command/add_subdirectory.html\">add_subdirectory</a>\n will also be called for those modules.</p>\n<p>See <a href=\"#/co_find_modules\">co_find_modules</a> and <a href=\"#/co_module\">co_module</a>.</p>\n<p>Example:</p>\n<pre><code> co_find_modules(modules)\n\n # Explicitly enable my_module\n co_require_module(my_module)\n\n co_include_modules()\n</code></pre>",
        "path": [
            "Module Functions",
            "co_include_modules"
        ],
        "title": "co_include_modules"
    },
    {
        "content": "<p>Enable yasm support, if yasm is found any targets which use <code>asm-sources</code> will\n use the assembler rather than the generic sources. Set to OFF to prevent the\n assembler being used even if yasm is found. Defaults to ON.</p>",
        "path": [
            "Configuration",
            "CONSORT_ENABLE_ASM"
        ],
        "title": "CONSORT_ENABLE_ASM"
    },
    {
        "content": "<p>Require yasm to build (if <a href=\"#/CONSORT_ENABLE_ASM\">CONSORT_ENABLE_ASM</a> is ON).\n If yasm is not found and  <a href=\"#/CONSORT_ENABLE_ASM\">CONSORT_ENABLE_ASM</a> is ON\n Consort will error. Defaults to OFF.</p>",
        "path": [
            "Configuration",
            "CONSORT_REQUIRE_ASM"
        ],
        "title": "CONSORT_REQUIRE_ASM"
    },
    {
        "content": "<p>In-source builds pollute the source tree with build artefacts and prevent\n multiple build trees (for example for cross-compilation) from being associated\n with a single source tree. You usually don't want this, so by default consort\n disables them. If you must you can set CONSORT_PERMIT_INSOURCE_BUILDS to ON\n before including consort.cmake to permit in-source builds.</p>",
        "path": [
            "Configuration",
            "CONSORT_PERMIT_INSOURCE_BUILDS"
        ],
        "title": "CONSORT_PERMIT_INSOURCE_BUILDS"
    },
    {
        "content": "<p>Builds on NFS partitions will be slow, consort stops you from doing it by\n default. You can set CONSORT_PERMIT_NFS_BUILDS to ON to enable it.</p>",
        "path": [
            "Configuration",
            "CONSORT_PERMIT_NFS_BUILDS"
        ],
        "title": "CONSORT_PERMIT_NFS_BUILDS"
    },
    {
        "content": "<p>Visual Studio 2013 and later use a version of the Windows runtime incompatible\n with Windows XP. Set this flag to ON to cause them to use an earlier version\n compatible with XP. Defaults to OFF.</p>",
        "path": [
            "Configuration",
            "CONSORT_SUPPORT_WINDOWS_XP"
        ],
        "title": "CONSORT_SUPPORT_WINDOWS_XP"
    },
    {
        "content": "<p>Run tests added with <a href=\"#/co_test\">co_test</a> to be run under valgrind. Useful for\n detecting invalid memory accesses and leaks in test cases.</p>",
        "path": [
            "Configuration",
            "CONSORT_VALGRIND_TESTS"
        ],
        "title": "CONSORT_VALGRIND_TESTS"
    },
    {
        "content": "<p>Enable C++11 support. Set to ON to set the necessary options and compiler flags\n to enable C++11 code. Defaults to OFF, except on OS X Mavericks and later,\n where it defaults to ON.</p>",
        "path": [
            "Configuration",
            "CONSORT_CXX11"
        ],
        "title": "CONSORT_CXX11"
    },
    {
        "content": "<p>List of suppression files to pass to valgrind when <a href=\"#/CONSORT_VALGRIND_TESTS\">CONSORT_VALGRIND_TESTS</a>\n is ON.</p>",
        "path": [
            "Configuration",
            "CONSORT_VALGRIND_SUPPRESSIONS"
        ],
        "title": "CONSORT_VALGRIND_SUPPRESSIONS"
    },
    {
        "content": "<p><code>co_var_name(outvar name)</code></p>\n<p>Convert a \"name\" to a sensible variable name by making it upper case and\n replacing special characters with underscores.</p>",
        "path": [
            "Utilities",
            "co_var_name"
        ],
        "title": "co_var_name"
    },
    {
        "content": "<p><code>co_list_contains(list-variable-name value variable)</code></p>\n<p>Determine if the list <code>${list-variable-name}</code> contains <code>value</code> and set <code>${variable}</code>\n to 1 or 0 appropriately.</p>",
        "path": [
            "Utilities",
            "co_list_contains"
        ],
        "title": "co_list_contains"
    },
    {
        "content": "<p>Generic argument parsing macro</p>\n<p><code>co_parse_args(prefix \"group name;group name;...\" \"flag name;flag name;...\" arguments...)</code></p>\n<p>Scan \"arguments\" looking for \"flags\" (i.e. an exact match for anything in the\n list of flags) or \"groups\" (anything in the list of group names followed by a\n colon).</p>\n<p>For each flag, this function will set a variable in the parent scope to ON or\n OFF depending on whether the flag is defined. The variable will be an\n upper-cased version of the flag name, with the specified prefix. Special\n characters are replaced with an underscore (see <a href=\"#/co_var_name\">co_var_name</a>).</p>\n<p>For each group, this function will set a variable in the parent scope to a\n list of all the items that follow the group name. The variable will be an\n upper-cased version of the flag name, with the specified prefix. Special\n characters are replaced with an underscore (see <a href=\"#/co_var_name\">co_var_name</a>).</p>\n<p>Arguments that are not a flag and occur outside of a group are added to the\n ${prefix}_ARGN variable.</p>\n<p>Group and flag names are case sensitive!</p>",
        "path": [
            "Utilities",
            "co_parse_args"
        ],
        "title": "co_parse_args"
    },
    {
        "content": "<p>This variable is 1 if <code>sizeof(void*) &gt;= 8</code>.</p>",
        "path": [
            "Variables",
            "CONSORT_64BIT"
        ],
        "title": "CONSORT_64BIT"
    },
    {
        "content": "<p>Set to 1 if Consort detects the compiler is GCC (or similar).</p>\n<p>In addition, Consort will set the variables <code>CONSORT_GCC_40</code>, <code>CONSORT_GCC_41</code>\n <code>CONSORT_GCC_42</code>, <code>CONSORT_GCC_43</code>, <code>CONSORT_GCC_44</code>, <code>CONSORT_GCC_45</code>,\n <code>CONSORT_GCC_46</code>, <code>CONSORT_GCC_47</code>, <code>CONSORT_GCC_48</code>, and <code>CONSORT_GCC_49</code> if\n the GCC version is <em>greater than or equal to</em> the appropriate version.</p>",
        "path": [
            "Variables",
            "CONSORT_GCC"
        ],
        "title": "CONSORT_GCC"
    },
    {
        "content": "<p>Set to 1 if Consort detects the compiler is MSVC.</p>\n<p>In addition, Consort will set <code>CONSORT_MSVC_2010</code> if the compiler is MSVC 2010,\n <code>CONSORT_MSVC_2012</code> if the compiler is MSVC 2012, and <code>CONSORT_MSVC_2013</code> if\n the compiler is MSVC 2013.</p>",
        "path": [
            "Variables",
            "CONSORT_MSVC"
        ],
        "title": "CONSORT_MSVC"
    },
    {
        "content": "<p>Set to 1 if Consort detects the compiler is Clang.</p>",
        "path": [
            "Variables",
            "CONSORT_CLANG"
        ],
        "title": "CONSORT_CLANG"
    },
    {
        "content": "<ul>\n<li>Set to gcc for GCC</li>\n<li>Set to vs2010 for MSVC 2010</li>\n<li>Set to vs2012 for MSVC 2012</li>\n<li>Set to vs2013 for MSVC 2013</li>\n<li>set to clang for Clang</li>\n</ul>",
        "path": [
            "Variables",
            "CONSORT_COMPILER_NAME"
        ],
        "title": "CONSORT_COMPILER_NAME"
    },
    {
        "content": "<p>Some generators support multiple build configurations, this helps you detect\n that and adjust appropriately. Set to 1 if the generator supports multiple\n build configurations.</p>",
        "path": [
            "Variables",
            "CONSORT_MULTICONFIG_BUILD"
        ],
        "title": "CONSORT_MULTICONFIG_BUILD"
    },
    {
        "content": "<p>Set to 1 if the build type contains debug information\n (<a href=\"http://www.cmake.org/cmake/help/v3.3/variable/CMAKE_BUILD_TYPE.html\">CMAKE_BUILD_TYPE</a>\n is Debug or RelWithDebInfo). Not set for generators that support multiple\n build configurations (see <a href=\"#/CONSORT_MULTICONFIG_BUILD\">CONSORT_MULTICONFIG_BUILD</a>).</p>",
        "path": [
            "Variables",
            "CONSORT_DEBUG_BUILD"
        ],
        "title": "CONSORT_DEBUG_BUILD"
    },
    {
        "content": "<p>Set to 1 if consort detects the build target is Windows. Also adds\n <code>-DCONSORT_WINDOWS=1</code> to the compile definitions.</p>\n<p>In addition CONSORT_WINDOWS_X86_64 will be defined as a CMake variable and\n preprocessor definition if <a href=\"#/CONSORT_64BIT\">CONSORT_64BIT</a> is set. Otherwise\n CONSORT_WINDOWS_X86 will be defined as a CMake variable and preprocessor\n definition.</p>",
        "path": [
            "Variables",
            "CONSORT_WINDOWS"
        ],
        "title": "CONSORT_WINDOWS"
    },
    {
        "content": "<p>Set to 1 if consort detects the build target is Mac OS X. Also adds\n <code>-DCONSORT_MACOSX=1</code> to the compile definitions.</p>\n<p>In addition CONSORT_MACOSX_X86_64 will be defined as a CMake variable and\n preprocessor definition if <a href=\"#/CONSORT_64BIT\">CONSORT_64BIT</a> is set. Otherwise\n CONSORT_MACOSX_X86 will be defined as a CMake variable and preprocessor\n definition.</p>",
        "path": [
            "Variables",
            "CONSORT_MACOSX"
        ],
        "title": "CONSORT_MACOSX"
    },
    {
        "content": "<p>Set to 1 if consort detects the build target is Linux. Also adds\n <code>-DCONSORT_LINUX=1</code> to the compile definitions.</p>\n<p>In addition CONSORT_LINUX_X86_64 will be defined as a CMake variable and\n preprocessor definition if <a href=\"#/CONSORT_64BIT\">CONSORT_64BIT</a> is set. Otherwise\n CONSORT_LINUX_X86 will be defined as a CMake variable and preprocessor\n definition.</p>",
        "path": [
            "Variables",
            "CONSORT_LINUX"
        ],
        "title": "CONSORT_LINUX"
    },
    {
        "content": "<ul>\n<li>windows-x86_64 for 64 bit Windows</li>\n<li>windows-x86 for 32 bit Windows</li>\n<li>macosx-x86_64 for 64 bit Mac OS X</li>\n<li>macosx-x86 for 32 bit Mac OS X</li>\n<li>linux-x86_64 for 64 bit Linux</li>\n<li>linux-x86 for 32 bit Linux</li>\n</ul>",
        "path": [
            "Variables",
            "CONSORT_PLATFORM_NAME"
        ],
        "title": "CONSORT_PLATFORM_NAME"
    },
    {
        "content": "<p>Define a list of directories to search for boost, Consort will automatically\n add these directories to locations to search for Boost.</p>\n<p>By default, <a href=\"#/co_enable_boost\">co_enable_boost</a> searches the following locations:</p>\n<h2>Windows</h2>\n<ul>\n<li>c:/opt/qt5/${CONSORT_PLATFORM_NAME}</li>\n<li>c:/qt5/${CONSORT_PLATFORM_NAME}</li>\n<li>c:/opt/qt/${CONSORT_PLATFORM_NAME}</li>\n<li>c:/qt/${CONSORT_PLATFORM_NAME}</li>\n<li>c:/opt/qt</li>\n<li>c:/qt</li>\n</ul>\n<h2>Linux and Mac OS X</h2>\n<ul>\n<li>/opt/qt5/${CONSORT_PLATFORM_NAME}</li>\n<li>/opt/qt5</li>\n<li>/opt/qt/${CONSORT_PLATFORM_NAME}</li>\n<li>/opt/qt</li>\n</ul>",
        "path": [
            "Externals",
            "CONSORT_QT5_LOCATIONS"
        ],
        "title": "CONSORT_QT5_LOCATIONS"
    },
    {
        "content": "<p>Set to the root directory of Qt. Consort expects to find the Qt5 CMake files\n in ${QT_ROOT}/lib/cmake. If this is not set, Consort will set it to the\n location it finds Qt in.</p>",
        "path": [
            "QT_ROOT"
        ],
        "title": "QT_ROOT"
    },
    {
        "content": "<p><code>co_enable_qt5(module module...)</code></p>\n<p>Find and enable support for Qt5. You should specify the Qt modules you\n want (in addition to Core). For example</p>\n<p><code>co_enable_qt5(Gui Widgets)</code></p>\n<p>will find QtCore, QtGui and QtWidgets. Libraries can then be linked to targets\n through the use of the <a href=\"#/CONSORT_COMMON_GROUPS\">qt-modules</a> group.</p>\n<p>Consort will search the paths in <a href=\"#/CONSORT_QT5_LOCATIONS\">qt-CONSORT_QT5_LOCATIONS</a>\n for Qt by default, you can modify the list of search paths or manually\n specify <a href=\"#/QT_ROOT\">QT_ROOT</a>.</p>\n<p>Consort will automatically copy or symlink Qt binaries into the build (bin)\n directory to ensure that Qt programs can be launched directly from the build\n output. Consort also sets <a href=\"http://www.cmake.org/cmake/help/v3.3/variable/CMAKE_AUTORCC.html\">CMAKE_AUTORCC</a>\n to enable automatic compilation of resources.</p>\n<p>If Qt is found, the <code>QT_FOUND</code> and <code>QT5_FOUND</code> flags will be set to 1.</p>",
        "path": [
            "Externals",
            "co_enable_qt5"
        ],
        "title": "co_enable_qt5"
    },
    {
        "content": "<p><code>co_enable_default_qt5(module module...)</code></p>\n<p>Find and enable support for Qt5. This macro will use the default list of\n modules provided by Consort, you can add additional modules if necessary.</p>\n<p>The default modules are:</p>\n<ul>\n<li>Gui</li>\n<li>Widgets</li>\n<li>Network</li>\n<li>WebKit</li>\n<li>WebKitWidgets</li>\n<li>WebChannel</li>\n<li>Sql</li>\n<li>Svg</li>\n<li>OpenGL</li>\n<li>Concurrent</li>\n<li>Multimedia</li>\n<li>PrintSupport</li>\n<li>MultimediaWidgets</li>\n<li>Positioning</li>\n<li>Qml</li>\n<li>Quick</li>\n<li>Sensors</li>\n</ul>",
        "path": [
            "Externals",
            "co_enable_default_qt5"
        ],
        "title": "co_enable_default_qt5"
    },
    {
        "content": "<p><code>co_write_file_if_changed( filename content )</code></p>\n<p>Ensure \"filename\" contains \"content\", but do not touch the file if it is not\n necessary. Useful for generating output files, without triggering rebuilds\n when cmake is run. Equivalent to <code>file(WRITE \"${filename}\" \"${content}\")</code>.</p>",
        "path": [
            "Utilities",
            "co_write_file_if_changed"
        ],
        "title": "co_write_file_if_changed"
    },
    {
        "content": "<p><code>co_process_qt_args(target)</code></p>\n<p>Adjust properties of target as necessary to add Qt support. Note that this\n macro needs to be called before target is declared. This macro is analogous\n to <a href=\"#/co_process_common_args\">co_process_common_args</a>, but for Qt specific\n functionality. This is normally called for you by Consort, however, you\n can use it to process the common Qt arguments for your targets if necessary.</p>\n<pre><code> function(my_target name)\n     co_parse_args(THIS \"${CONSORT_COMMON_GROUPS}\" \"${CONSORT_COMMON_FLAGS}\" ${ARGN})\n\n     co_safe_glob(THIS_SOURCES ${THIS_SOURCES})\n     co_process_qt_args(${name})\n     add_executable(${name} ${THIS_SOURCES} ${THIS_GENERATED_SOURCES})\n\n     co_process_common_args(${name})\n endfunction()\n</code></pre>",
        "path": [
            "Externals",
            "co_process_qt_args"
        ],
        "title": "co_process_qt_args"
    },
    {
        "content": "<p><code>co_runtime_dll(file file...)</code></p>\n<p>Copy DLLs required at runtime to the bin folder. On Windows in particular,\n it may be necessary to have DLLs in the same folder as the compiled binaries\n in order for the loader to find them. This routine automatically copies the\n files passed as arguments to all of the runtime output directories.</p>",
        "path": [
            "Utilities",
            "co_runtime_dll"
        ],
        "title": "co_runtime_dll"
    },
    {
        "content": "<p><code>co_runtime_link(target linkname)</code></p>\n<p>Link the \"target\" file or directory as \"linkname\" in each of the runtime\n output locations. Unlike <a href=\"#/co_link\">co_link</a>, this will create multiple links\n for CMake generators that support multiple build configurations.</p>\n<p>This is useful for linking resources such as data files or plugins into the\n build directory so the build directory can emulate an installed version of the\n software.</p>",
        "path": [
            "Utilities",
            "co_runtime_link"
        ],
        "title": "co_runtime_link"
    },
    {
        "content": "<p><code>co_safe_glob( output_var glob glob ...)</code></p>\n<p>Expand file globs into output_var, generating an error if any glob files to\n expand to any files. Analogous to <code>file(GLOB ${var} ${ARGN})</code> but with a\n sanity check to ensure each glob matches at least one file.</p>",
        "path": [
            "Utilities",
            "co_safe_glob"
        ],
        "title": "co_safe_glob"
    },
    {
        "content": "<pre><code> co_test(\n    target-name arg arg...\n    command: ...\n    working-directory: ...\n    configurations: ...\n    suppressions: ...\n    no-valgrind\n )\n</code></pre>\n<p>Mark target-name as a test suite for ctest to run. The <code>configurations</code> group\n can be used to indicate the test should only be run for particular build\n configurations. The <code>suppressions</code> group can be used to add suppression files\n when the test is run under valgrind and the <code>no-valgrind</code> flag can be used\n to indicate the test should not be run under valgrind.</p>\n<p>The <code>command</code> group can be used to run the test within a specific environment,\n e.g. under xvfb for test suites that require an X frame buffer but need to be\n able to run headless. The <code>command</code> group is prefixed to the command used to\n run the test.</p>\n<p>The <code>working-directory</code> option can be used to specify a working directory for\n the test.</p>",
        "path": [
            "Build Targets",
            "co_test"
        ],
        "title": "co_test"
    },
    {
        "content": "<p>Contains the current version of Consort</p>",
        "path": [
            "Variables",
            "CONSORT_VERSION"
        ],
        "title": "CONSORT_VERSION"
    },
    {
        "content": "<p>List of flags Consort will add when soft warnings are enabled for C source files.</p>",
        "path": [
            "Warnings",
            "CONSORT_SOFT_C_WARNING_FLAGS"
        ],
        "title": "CONSORT_SOFT_C_WARNING_FLAGS"
    },
    {
        "content": "<p>List of flags Consort will add when soft warnings are enabled for C++# source files.</p>",
        "path": [
            "Warnings",
            "CONSORT_SOFT_CXX_WARNING_FLAGS"
        ],
        "title": "CONSORT_SOFT_CXX_WARNING_FLAGS"
    },
    {
        "content": "<p>List of flags Consort will add when soft warnings are enabled.</p>",
        "path": [
            "Warnings",
            "CONSORT_SOFT_WARNING_FLAGS"
        ],
        "title": "CONSORT_SOFT_WARNING_FLAGS"
    },
    {
        "content": "<p>List of flags Consort will add when strict warnings are enabled.</p>",
        "path": [
            "Warnings",
            "CONSORT_STRICT_WARNING_FLAGS"
        ],
        "title": "CONSORT_STRICT_WARNING_FLAGS"
    },
    {
        "content": "<p>List of flags Consort will add when warnings are suppressed.</p>",
        "path": [
            "Warnings",
            "CONSORT_SUPPRESS_WARNING_FLAGS"
        ],
        "title": "CONSORT_SUPPRESS_WARNING_FLAGS"
    },
    {
        "content": "<p>Flags Consort will add when <a href=\"#/co_warnings_are_errors\">co_warnings_are_errors</a>\n is set to ON.</p>",
        "path": [
            "Warnings",
            "CONSORT_WARNINGS_ARE_ERRORS"
        ],
        "title": "CONSORT_WARNINGS_ARE_ERRORS"
    },
    {
        "content": "<p><code>co_suppress_warnings()</code></p>\n<p>Suppress all warnings from targets in the current directory and below.</p>\n<p>Consort provides three levels of warning, with appropriate flags set for each\n supported compiler. <a href=\"#/co_suppress_warnings\">co_suppress_warnings</a> is the\n softest level, it only reports warnings that are almost certainly errors - and\n even then only a handful. <code>co_suppress_warnings</code> is only recommended for\n external code where warnings cannot be fixed.\n <a href=\"#/co_soft_warnings\">co_soft_warnings</a> generates warnings that can often lead\n to bugs (although will likely yield a number of false positives).\n <a href=\"#/co_strict_warnings\">co_strict_warnings</a> generates warnings for any code that\n could lead to a bug, and where the code can be re-written to suppress the\n warning if it is a false positive. Consort uses strict warnings, and treats\n warnings as errors by default.</p>",
        "path": [
            "Warnings",
            "co_suppress_warnings"
        ],
        "title": "co_suppress_warnings"
    },
    {
        "content": "<p><code>co_soft_warnings()</code></p>\n<p>Apply soft warning flags to this directory and below.</p>\n<p>Consort provides three levels of warning, with appropriate flags set for each\n supported compiler. <a href=\"#/co_suppress_warnings\">co_suppress_warnings</a> is the\n softest level, it only reports warnings that are almost certainly errors - and\n even then only a handful. <code>co_suppress_warnings</code> is only recommended for\n external code where warnings cannot be fixed.\n <a href=\"#/co_soft_warnings\">co_soft_warnings</a> generates warnings that can often lead\n to bugs (although will likely yield a number of false positives).\n <a href=\"#/co_strict_warnings\">co_strict_warnings</a> generates warnings for any code that\n could lead to a bug, and where the code can be re-written to suppress the\n warning if it is a false positive. Consort uses strict warnings, and treats\n warnings as errors by default.</p>",
        "path": [
            "Warnings",
            "co_soft_warnings"
        ],
        "title": "co_soft_warnings"
    },
    {
        "content": "<p><code>co_strict_warnings()</code></p>\n<p>Apply strict warning flags to this directory and below.</p>\n<p>Consort provides three levels of warning, with appropriate flags set for each\n supported compiler. <a href=\"#/co_suppress_warnings\">co_suppress_warnings</a> is the\n softest level, it only reports warnings that are almost certainly errors - and\n even then only a handful. <code>co_suppress_warnings</code> is only recommended for\n external code where warnings cannot be fixed.\n <a href=\"#/co_soft_warnings\">co_soft_warnings</a> generates warnings that can often lead\n to bugs (although will likely yield a number of false positives).\n <a href=\"#/co_strict_warnings\">co_strict_warnings</a> generates warnings for any code that\n could lead to a bug, and where the code can be re-written to suppress the\n warning if it is a false positive. Consort uses strict warnings, and treats\n warnings as errors by default.</p>",
        "path": [
            "Warnings",
            "co_strict_warnings"
        ],
        "title": "co_strict_warnings"
    },
    {
        "content": "<p><code>co_warnings_are_errors(ON|OFF)</code></p>\n<p>Set whether or not warnings are errors</p>",
        "path": [
            "Warnings",
            "co_warnings_are_errors"
        ],
        "title": "co_warnings_are_errors"
    },
    {
        "content": "<p>Set to 1 if <a href=\"#/CONSORT_ENABLE_ASM\">CONSORT_ENABLE_ASM</a> is set and yasm was\n found, otherwise set to 0.</p>",
        "path": [
            "Variables",
            "CONSORT_ASM_ENABLED"
        ],
        "title": "CONSORT_ASM_ENABLED"
    },
    {
        "content": "<p><code>co_add_asm_dependencies(file file...)</code></p>\n<p>Scan input ASM files for dependencies and set the\n <a href=\"http://www.cmake.org/cmake/help/v3.3/prop_sf/OBJECT_DEPENDS.html\">OBJECT_DEPENDS</a>\n property to ensure rebuilds are triggered as necessary.</p>\n<p>Due to limitations of CMake, Consort will not scan for new dependencies when\n files change - so it may be necessary to re-run cmake occasionally to trigger\n proper rebuilds.</p>",
        "path": [
            "Utilities",
            "co_add_asm_dependencies"
        ],
        "title": "co_add_asm_dependencies"
    }
]